import React, { useEffect, useMemo, useState } from "react";

/**
 * NewsFeed renders a scrollable list of news items (title + description)
 * fetched from an API Gateway endpoint that returns { count, items: [...] }.
 */
export default function NewsFeed({
  feedUrl =
    import.meta.env.VITE_NEWS_FEED_URL ||
    "https://oqwz797yb0.execute-api.eu-west-2.amazonaws.com/prod/news",
}) {
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const ac = new AbortController();
    setLoading(true);
    setError(null);

    const fetchFeed = async () => {
      try {
        const res = await fetch(feedUrl, { signal: ac.signal });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const data = await res.json();

        // Expect { count, items: [...] }
        const raw = Array.isArray(data?.items) ? data.items : [];
        if (!Array.isArray(data?.items)) {
          throw new Error("Unexpected response shape: missing items[]");
        }

        // Optional: newest first by publishedAt (ISO strings)
        raw.sort((a, b) => {
          const A = a?.publishedAt ?? "";
          const B = b?.publishedAt ?? "";
          return A < B ? 1 : A > B ? -1 : 0;
        });

        // Keep only fields we care about and ensure strings are trimmed
        const cleaned = raw
          .filter((x) => x && (x.title || x.description))
          .map((x, idx) => ({
            id: x.clusterId || x.id || String(idx),
            clusterId: x.clusterId ?? null,
            title: typeof x.title === "string" ? x.title.trim() : "",
            description:
              typeof x.description === "string" ? x.description.trim() : "",
            risk_level:
              typeof x.risk_level === "number"
                ? x.risk_level
                : Number.isFinite(Number(x?.risk_level))
                ? Number(x.risk_level)
                : null,
            publishedAt: typeof x.publishedAt === "string" ? x.publishedAt : "",
            source: typeof x.source === "string" ? x.source : "",
            canonicalUrl:
              typeof x.canonicalUrl === "string" ? x.canonicalUrl : "",
            imageUrl: typeof x.imageUrl === "string" ? x.imageUrl : "",
            main_topics: Array.isArray(x.main_topics) ? x.main_topics : [],
          }));

        setItems(cleaned);
      } catch (e) {
        if (e.name !== "AbortError") {
          setError(e.message || "Failed to load feed");
        }
      } finally {
        setLoading(false);
      }
    };

    fetchFeed();
    return () => ac.abort();
  }, [feedUrl]);

  const body = useMemo(() => {
    if (loading) {
      return (
        <div className="news-status" aria-live="polite">
          Loading news…
        </div>
      );
    }
    if (error) {
      return (
        <div className="news-status news-status--error" role="alert">
          Unable to load news feed ({error}).
        </div>
      );
    }
    if (!items.length) {
      return (
        <div className="news-status" aria-live="polite">
          No news items available.
        </div>
      );
    }
    return (
      <ul className="news-list" aria-label="News items">
        {items.map((it) => (
          <li key={it.id} className="news-item">
            {it.title ? <div className="news-title">{it.title}</div> : null}
            {it.description ? (
              <div className="news-desc">{it.description}</div>
            ) : null}

            {/* Optional extras: show metadata if present */}
            <div className="news-meta">
              {it.publishedAt ? (
                <time dateTime={it.publishedAt}>
                  {new Date(it.publishedAt).toLocaleString()}
                </time>
              ) : null}
              {it.source ? <span className="news-source"> · {it.source}</span> : null}
              {Number.isFinite(it.risk_level) ? (
                <span className={`news-risk news-risk--${it.risk_level}`}>
                  · Risk {it.risk_level}
                </span>
              ) : null}
            </div>

            {it.canonicalUrl ? (
              <div className="news-link">
                <a href={it.canonicalUrl} target="_blank" rel="noreferrer">
                  Read more
                </a>
              </div>
            ) : null}

            {Array.isArray(it.main_topics) && it.main_topics.length ? (
              <ul className="news-tags" aria-label="Topics">
                {it.main_topics.map((t, i) => (
                  <li key={`${it.id}-topic-${i}`} className="news-tag">
                    {t}
                  </li>
                ))}
              </ul>
            ) : null}
          </li>
        ))}
      </ul>
    );
  }, [loading, error, items]);

  return <div className="news-feed">{body}</div>;
}



