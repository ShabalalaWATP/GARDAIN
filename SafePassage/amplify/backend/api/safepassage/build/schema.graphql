type Report {
  id: ID!
  name: String!
  description: String
  image: String
  lat: Float
  lon: Float
  toEvacuate: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelReportConnection {
  items: [Report]!
  nextToken: String
}

input ModelReportFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  lat: ModelFloatInput
  lon: ModelFloatInput
  toEvacuate: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelReportFilterInput]
  or: [ModelReportFilterInput]
  not: ModelReportFilterInput
  owner: ModelStringInput
}

type Query {
  getReport(id: ID!): Report
  listReports(filter: ModelReportFilterInput, limit: Int, nextToken: String): ModelReportConnection
}

input ModelReportConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  image: ModelStringInput
  lat: ModelFloatInput
  lon: ModelFloatInput
  toEvacuate: ModelBooleanInput
  and: [ModelReportConditionInput]
  or: [ModelReportConditionInput]
  not: ModelReportConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateReportInput {
  id: ID
  name: String!
  description: String
  image: String
  lat: Float
  lon: Float
  toEvacuate: Boolean!
}

input UpdateReportInput {
  id: ID!
  name: String
  description: String
  image: String
  lat: Float
  lon: Float
  toEvacuate: Boolean
}

input DeleteReportInput {
  id: ID!
}

type Mutation {
  createReport(input: CreateReportInput!, condition: ModelReportConditionInput): Report
  updateReport(input: UpdateReportInput!, condition: ModelReportConditionInput): Report
  deleteReport(input: DeleteReportInput!, condition: ModelReportConditionInput): Report
}

input ModelSubscriptionReportFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  image: ModelSubscriptionStringInput
  lat: ModelSubscriptionFloatInput
  lon: ModelSubscriptionFloatInput
  toEvacuate: ModelSubscriptionBooleanInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionReportFilterInput]
  or: [ModelSubscriptionReportFilterInput]
  owner: ModelStringInput
}

type Subscription {
  onCreateReport(filter: ModelSubscriptionReportFilterInput, owner: String): Report @aws_subscribe(mutations: ["createReport"])
  onUpdateReport(filter: ModelSubscriptionReportFilterInput, owner: String): Report @aws_subscribe(mutations: ["updateReport"])
  onDeleteReport(filter: ModelSubscriptionReportFilterInput, owner: String): Report @aws_subscribe(mutations: ["deleteReport"])
}
